python --version
pip install PyQt6 pyqt6-tools
python -c "from PyQt6 import QtCore, QtWidgets; print(QtCore.PYQT_VERSION_STR)"
pyqt6-tools designer
import sys
from PyQt6.QtWidgets import QApplication, QLabel

app = QApplication(sys.argv)
window = QLabel("Hello, PyQt6!")
window.resize(200, 150)
window.show()
sys.exit(app.exec())

class ClassName:
    # 屬性（變數）
    # 方法（函式）
    class Dog:
    # 屬性
    def __init__(self, name, age):
        self.name = name  # 屬性
        self.age = age    # 屬性

    # 方法
    def intro(self):
        print(f"{self.name} is {self.age} years old!")

# 創建物件
dog1 = Dog("Buddy", 3)
dog1.intro()  # 輸出：Buddy is 3 years old!
dog2 = Dog("Candy", 5)
dog2.intro()  # 輸出：Candy is 5 years old!
if __name__ == "__main__":
    # Code Block
    import sys
from PyQt6.QtWidgets import QApplication, QLabel, QPushButton
from PyQt6.QtWidgets import QVBoxLayout, QWidget

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyQt6 基本 GUI")
        self.resize(400, 300)

        # 建立標籤與按鈕
        self.label = QLabel("按下按鈕開始計數！", self)
        self.button = QPushButton("點擊我", self)

        # 計數變數
        self.counter = 0

        # 設定佈局
        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.button)
        self.setLayout(layout)

        # 連接按鈕點擊事件
        self.button.clicked.connect(self.increment_counter)

    def increment_counter(self):
        self.counter += 1
        self.label.setText(f"按鈕已被點擊 {self.counter} 次！")

# 主程式入口
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
    import sys
from PyQt6.QtWidgets import QApplication, QLabel, QPushButton
from PyQt6.QtWidgets import QVBoxLayout, QWidget
class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyQt6 基本 GUI")
self.resize(400, 300)
self.label = QLabel("按下按鈕開始計數！", self)
self.button = QPushButton("點擊我", self)

self.counter = 0
layout = QVBoxLayout()
layout.addWidget(self.label)
layout.addWidget(self.button)
self.setLayout(layout)
self.button.clicked.connect(self.increment_counter)
def increment_counter(self):
    self.counter += 1
    self.label.setText(f"按鈕已被點擊 {self.counter} 次！")

    if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

    from PyQt6.QtWidgets import (
    QApplication, QLabel, QLineEdit,
    QPushButton, QVBoxLayout, QWidget, QMessageBox
)
import sys

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyQt6 輸入與互動")
        self.resize(400, 300)

        # 元件：標籤、輸入框、按鈕
        self.label = QLabel("請輸入文字並點擊按鈕：", self)
        self.input_field = QLineEdit(self)
        self.input_field.setPlaceholderText("在這裡輸入...")
        self.display_button = QPushButton("顯示文字", self)
        self.clear_button = QPushButton("清除文字", self)

        # 設定佈局
        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.input_field)
        layout.addWidget(self.display_button)
        layout.addWidget(self.clear_button)
        self.setLayout(layout)

        # 事件連接
        self.display_button.clicked.connect(self.display_text)
        self.clear_button.clicked.connect(self.clear_text)

    def display_text(self):
        text = self.input_field.text()
        if text.strip():
            self.label.setText(f"您輸入了：{text}")
        else:
            QMessageBox.warning(self, "警告", "輸入欄位為空！")

    def clear_text(self):
        self.input_field.clear()
        self.label.setText("請輸入文字並點擊按鈕：")

# 主程式入口
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
    from PyQt6.QtWidgets import (
    QApplication, QLabel, QLineEdit,
    QPushButton, QVBoxLayout, QWidget, QMessageBox
)
import sys
self.input_field = QLineEdit(self)
self.input_field.setPlaceholderText("在這裡輸入...")
def display_text(self):
    text = self.input_field.text()
    if text.strip():
        self.label.setText(f"您輸入了：{text}")
    else:
        QMessageBox.warning(self, "警告", "輸入欄位為空！")
        def clear_text(self):
    self.input_field.clear()
    self.label.setText("請輸入文字並點擊按鈕：")
